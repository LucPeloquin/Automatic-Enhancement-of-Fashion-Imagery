# Automatic Enhancement of Fashion Imagery
# Technical Implementation Details

## Architecture Overview

The project follows a modular architecture with clear separation of concerns:

1. **Core Processing Engine** (main.py)
   - Contains all image processing algorithms
   - Implements the enhancement pipeline
   - Provides batch processing capabilities

2. **User Interface Layer** (ui.py)
   - Handles user interaction
   - Manages file/directory operations
   - Provides visual feedback

## Image Processing Pipeline

### 1. Image Analysis
Before processing, the system analyzes each image to determine optimal parameters:
- `analyze_image_content()`: Detects image characteristics
- `get_adaptive_config()`: Creates a tailored configuration

### 2. Pre-processing
- White balance correction using gray world assumption
- Noise reduction using non-local means denoising

### 3. Resolution Enhancement
- Lanczos upscaling (4x by default)
- Preserves details better than bicubic or bilinear methods

### 4. Color and Contrast Enhancement
- CLAHE for adaptive contrast enhancement
- Shadow and highlight recovery
- Color enhancement with separate saturation and vibrance controls

### 5. Detail Enhancement
- High-pass filtering in LAB color space
- Texture enhancement
- Unsharp masking with configurable parameters

### 6. Background Processing
- Background removal using rembg (U2Net model)
- Optional background replacement
- Edge feathering for natural transitions

### 7. Post-processing
- Auto-cropping based on content
- Quality assessment

## Key Algorithms Explained

### Lanczos Upscaling
The Lanczos algorithm uses a windowed sinc function for resampling, providing superior quality for upscaling fashion images where detail preservation is critical.

```python
def upscale_image(image, scale_factor=4):
    new_width = int(image.width * scale_factor)
    new_height = int(image.height * scale_factor)
    upscaled_image = image.resize((new_width, new_height), Image.LANCZOS)
    return upscaled_image
```

### High-Pass Filtering
High-pass filtering enhances fine details by removing low-frequency components and emphasizing high-frequency ones. The implementation uses LAB color space to preserve color accuracy while enhancing details.

```python
def high_pass_filter(image):
    image_lab = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2LAB)
    L, A, B = cv2.split(image_lab)
    low_pass_L = cv2.GaussianBlur(L, (5, 5), 0)
    high_pass_L = cv2.subtract(L, low_pass_L)
    strength = 1.2
    high_pass_L = cv2.multiply(high_pass_L, strength)
    L_high_pass = cv2.add(L, high_pass_L)
    processed_lab = cv2.merge([L_high_pass, A, B])
    processed_rgb = cv2.cvtColor(processed_lab, cv2.COLOR_LAB2RGB)
    return Image.fromarray(processed_rgb)
```

### Unsharp Masking
Unsharp masking enhances edges by subtracting a blurred version of the image from the original, then adding the difference back with amplification.

```python
def unsharp_mask(image, radius=2, percent=150, threshold=3):
    blurred = image.filter(ImageFilter.GaussianBlur(radius=radius))
    mask = ImageChops.subtract(image, blurred)
    enhanced_mask = mask.point(lambda x: x * (percent / 100))
    if threshold > 0:
        thresholded_mask = enhanced_mask.point(lambda x: 0 if x < threshold else x)
    else:
        thresholded_mask = enhanced_mask
    sharpened_image = ImageChops.add(image, thresholded_mask)
    return sharpened_image
```

### Adaptive Contrast Enhancement
CLAHE (Contrast Limited Adaptive Histogram Equalization) enhances contrast locally, which is particularly effective for fashion images with varying lighting conditions.

```python
def enhance_contrast(image, clip_limit=2.0, tile_grid_size=(8, 8)):
    img_array = np.array(image)
    lab = cv2.cvtColor(img_array, cv2.COLOR_RGB2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=clip_limit, tileGridSize=tile_grid_size)
    cl = clahe.apply(l)
    enhanced_lab = cv2.merge((cl, a, b))
    enhanced_rgb = cv2.cvtColor(enhanced_lab, cv2.COLOR_LAB2RGB)
    return Image.fromarray(enhanced_rgb)
```

### Background Removal
The project uses the rembg library, which implements the U2Net deep learning model for background removal. This provides high-quality segmentation of fashion items from their backgrounds.

```python
transparent_background_image = remove(sharpened_image)
```

## Parallel Processing Implementation

For batch processing, the system uses Python's multiprocessing module to utilize multiple CPU cores:

```python
def parallel_batch_process(input_directory, output_directory, config=None, num_workers=None):
    if num_workers is None:
        num_workers = multiprocessing.cpu_count()
    
    # Process images in parallel
    with multiprocessing.Pool(num_workers) as pool:
        results = pool.map(
            partial(process_single_image, config=config),
            enumerate(images_with_paths, start=1)
        )
```

## Adaptive Configuration System

The adaptive configuration system analyzes each image to determine optimal processing parameters:

```python
def analyze_image_content(image):
    img_array = np.array(image)
    gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    
    # Detect if image is low light
    is_low_light = gray.mean() < 100
    
    # Detect if image is high contrast
    is_high_contrast = gray.std() > 60
    
    # Detect if image is noisy
    laplacian = cv2.Laplacian(gray, cv2.CV_64F)
    is_noisy = laplacian.var() > 500
    
    # Detect if image has fine details
    edges = cv2.Canny(gray, 100, 200)
    has_fine_details = np.count_nonzero(edges) > (gray.size * 0.05)
    
    return {
        'is_low_light': is_low_light,
        'is_high_contrast': is_high_contrast,
        'is_noisy': is_noisy,
        'has_fine_details': has_fine_details
    }
```

Based on this analysis, the system creates a tailored configuration:

```python
def get_adaptive_config(image):
    analysis = analyze_image_content(image)
    
    config = {
        'upscale_factor': 4,
        'denoise_strength': 15 if analysis['is_noisy'] else 5,
        'high_pass_strength': 0.8 if analysis['has_fine_details'] else 1.2,
        'sharpen_radius': 1 if analysis['has_fine_details'] else 2,
        'sharpen_percent': 120 if analysis['is_high_contrast'] else 150,
        'sharpen_threshold': 5 if analysis['is_noisy'] else 3,
        'enhance_contrast': not analysis['is_high_contrast'],
        'enhance_colors': True,
        'saturation': 1.3 if analysis['is_low_light'] else 1.1,
        'vibrance': 1.2 if analysis['is_low_light'] else 1.0,
        'shadow_recovery': 0.3 if analysis['is_low_light'] else 0.1
    }
    
    return config
```

## UI Implementation

The UI is built using Tkinter for cross-platform compatibility:

- Uses threading to keep the interface responsive during processing
- Implements platform detection for OS-specific functionality
- Provides visual feedback through progress bars
- Uses desktop notifications for process completion

## Performance Considerations

- Memory usage is optimized by processing images sequentially in batch mode
- Parallel processing is available for systems with multiple cores
- Temporary files are managed to prevent disk space issues
- Processing parameters can be adjusted for performance vs. quality tradeoffs 